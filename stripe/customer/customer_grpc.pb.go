// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: proto/customer.proto

package customer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CustomerHandlerClient is the client API for CustomerHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomerHandlerClient interface {
	CreateCustomer(ctx context.Context, in *CustomerCreateRequest, opts ...grpc.CallOption) (*CustomerCreateReply, error)
	GetCustomer(ctx context.Context, in *CustomerGetRequest, opts ...grpc.CallOption) (*CustomerGetReply, error)
	DeleteCustomer(ctx context.Context, in *CustomerDeleteRequest, opts ...grpc.CallOption) (*CustomerDeleteReply, error)
}

type customerHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomerHandlerClient(cc grpc.ClientConnInterface) CustomerHandlerClient {
	return &customerHandlerClient{cc}
}

func (c *customerHandlerClient) CreateCustomer(ctx context.Context, in *CustomerCreateRequest, opts ...grpc.CallOption) (*CustomerCreateReply, error) {
	out := new(CustomerCreateReply)
	err := c.cc.Invoke(ctx, "/payments_v1.CustomerHandler/CreateCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerHandlerClient) GetCustomer(ctx context.Context, in *CustomerGetRequest, opts ...grpc.CallOption) (*CustomerGetReply, error) {
	out := new(CustomerGetReply)
	err := c.cc.Invoke(ctx, "/payments_v1.CustomerHandler/GetCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerHandlerClient) DeleteCustomer(ctx context.Context, in *CustomerDeleteRequest, opts ...grpc.CallOption) (*CustomerDeleteReply, error) {
	out := new(CustomerDeleteReply)
	err := c.cc.Invoke(ctx, "/payments_v1.CustomerHandler/DeleteCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerHandlerServer is the server API for CustomerHandler service.
// All implementations must embed UnimplementedCustomerHandlerServer
// for forward compatibility
type CustomerHandlerServer interface {
	CreateCustomer(context.Context, *CustomerCreateRequest) (*CustomerCreateReply, error)
	GetCustomer(context.Context, *CustomerGetRequest) (*CustomerGetReply, error)
	DeleteCustomer(context.Context, *CustomerDeleteRequest) (*CustomerDeleteReply, error)
	mustEmbedUnimplementedCustomerHandlerServer()
}

// UnimplementedCustomerHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedCustomerHandlerServer struct {
}

func (UnimplementedCustomerHandlerServer) CreateCustomer(context.Context, *CustomerCreateRequest) (*CustomerCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomer not implemented")
}
func (UnimplementedCustomerHandlerServer) GetCustomer(context.Context, *CustomerGetRequest) (*CustomerGetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomer not implemented")
}
func (UnimplementedCustomerHandlerServer) DeleteCustomer(context.Context, *CustomerDeleteRequest) (*CustomerDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCustomer not implemented")
}
func (UnimplementedCustomerHandlerServer) mustEmbedUnimplementedCustomerHandlerServer() {}

// UnsafeCustomerHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomerHandlerServer will
// result in compilation errors.
type UnsafeCustomerHandlerServer interface {
	mustEmbedUnimplementedCustomerHandlerServer()
}

func RegisterCustomerHandlerServer(s grpc.ServiceRegistrar, srv CustomerHandlerServer) {
	s.RegisterService(&CustomerHandler_ServiceDesc, srv)
}

func _CustomerHandler_CreateCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerHandlerServer).CreateCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payments_v1.CustomerHandler/CreateCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerHandlerServer).CreateCustomer(ctx, req.(*CustomerCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerHandler_GetCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerHandlerServer).GetCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payments_v1.CustomerHandler/GetCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerHandlerServer).GetCustomer(ctx, req.(*CustomerGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerHandler_DeleteCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerHandlerServer).DeleteCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payments_v1.CustomerHandler/DeleteCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerHandlerServer).DeleteCustomer(ctx, req.(*CustomerDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CustomerHandler_ServiceDesc is the grpc.ServiceDesc for CustomerHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomerHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payments_v1.CustomerHandler",
	HandlerType: (*CustomerHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCustomer",
			Handler:    _CustomerHandler_CreateCustomer_Handler,
		},
		{
			MethodName: "GetCustomer",
			Handler:    _CustomerHandler_GetCustomer_Handler,
		},
		{
			MethodName: "DeleteCustomer",
			Handler:    _CustomerHandler_DeleteCustomer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/customer.proto",
}
