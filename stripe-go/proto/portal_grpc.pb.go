// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: portal.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PortalHandlerClient is the client API for PortalHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PortalHandlerClient interface {
	CreatePortal(ctx context.Context, in *CreatePortalRequest, opts ...grpc.CallOption) (*CreatePortalReply, error)
}

type portalHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewPortalHandlerClient(cc grpc.ClientConnInterface) PortalHandlerClient {
	return &portalHandlerClient{cc}
}

func (c *portalHandlerClient) CreatePortal(ctx context.Context, in *CreatePortalRequest, opts ...grpc.CallOption) (*CreatePortalReply, error) {
	out := new(CreatePortalReply)
	err := c.cc.Invoke(ctx, "/payments_v1.PortalHandler/CreatePortal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PortalHandlerServer is the server API for PortalHandler service.
// All implementations must embed UnimplementedPortalHandlerServer
// for forward compatibility
type PortalHandlerServer interface {
	CreatePortal(context.Context, *CreatePortalRequest) (*CreatePortalReply, error)
	mustEmbedUnimplementedPortalHandlerServer()
}

// UnimplementedPortalHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedPortalHandlerServer struct {
}

func (UnimplementedPortalHandlerServer) CreatePortal(context.Context, *CreatePortalRequest) (*CreatePortalReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePortal not implemented")
}
func (UnimplementedPortalHandlerServer) mustEmbedUnimplementedPortalHandlerServer() {}

// UnsafePortalHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PortalHandlerServer will
// result in compilation errors.
type UnsafePortalHandlerServer interface {
	mustEmbedUnimplementedPortalHandlerServer()
}

func RegisterPortalHandlerServer(s grpc.ServiceRegistrar, srv PortalHandlerServer) {
	s.RegisterService(&PortalHandler_ServiceDesc, srv)
}

func _PortalHandler_CreatePortal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePortalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalHandlerServer).CreatePortal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payments_v1.PortalHandler/CreatePortal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalHandlerServer).CreatePortal(ctx, req.(*CreatePortalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PortalHandler_ServiceDesc is the grpc.ServiceDesc for PortalHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PortalHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payments_v1.PortalHandler",
	HandlerType: (*PortalHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePortal",
			Handler:    _PortalHandler_CreatePortal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "portal.proto",
}
